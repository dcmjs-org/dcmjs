{"version":3,"sources":["webpack://dcmjs/./normalizers.js"],"names":["Normalizer","datasets","dataset","undefined","sopClassUID","forEach","SOPClassUID","console","error","replace","toUID","DicomMetaDictionary","sopClassUIDsByName","sopClassUIDMap","CTImage","CTImageNormalizer","MRImage","MRImageNormalizer","EnhancedCTImage","EnhancedCTImageNormalizer","LegacyConvertedEnhancedCTImage","EnhancedMRImage","EnhancedMRImageNormalizer","LegacyConvertedEnhancedMRImage","EnhancedUSVolume","EnhancedUSVolumeNormalizer","PETImage","PETImageNormalizer","EnhancedPETImage","LegacyConvertedEnhancedPETImage","Segmentation","SEGImageNormalizer","DeformableSpatialRegistration","DSRNormalizer","ds","multiframeSOPClasses","indexOf","consistentSOPClassUIDs","normalizerClass","normalizerForSOPClassUID","normalizer","normalize","ImageNormalizer","convertToMultiframe","normalizeMultiframe","length","isMultiframe","derivation","DerivedImage","referenceDataset","NumberOfFrames","Rows","Columns","BitsAllocated","PixelRepresentation","RescaleSlope","RescaleIntercept","referencePosition","ImagePositionPatient","rowVector","ImageOrientationPatient","slice","columnVector","scanAxis","vec3CrossProduct","distanceDatasetPairs","position","positionVector","vec3Subtract","distance","vec3Dot","push","sort","a","b","String","_vrMap","PixelData","warn","frameSize","byteLength","ArrayBuffer","frame","pair","pixels","Uint16Array","frameView","set","e","RangeError","distance0","dataset0","distance1","dataset1","SharedFunctionalGroupsSequence","PlaneOrientationSequence","PixelMeasuresSequence","PixelSpacing","SpacingBetweenSlices","Math","abs","PerFrameFunctionalGroupsSequence","PlanePositionSequence","ReferencedSeriesSequence","SeriesInstanceUID","ReferencedInstanceSequence","Array","datasetIndex","FrameVOILUTSequence","WindowCenter","WindowWidth","ReferencedSOPClass","ReferencedSOPInstanceUID","SOPInstanceUID","dimensionUID","uid","DimensionOrganizationSequence","DimensionOrganizationUID","DimensionIndexSequence","DimensionIndexPointer","FunctionalGroupPointer","DimensionDescriptionLabel","Number","StudyID","validLateralities","Laterality","PresentationLUTShape","BodyPartExamined","FrameAnatomySequence","AnatomicRegionSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","FrameLaterality","rescaleIntercept","rescaleSlope","PixelValueTransformationSequence","RescaleType","frameNumber","FrameContentSequence","FrameAcquisitionDuration","StackID","InStackPositionNumber","DimensionIndexValues","frameTime","AcquisitionDate","AcquisitionTime","isNaN","frameContentSequence","FrameAcquisitionDateTime","FrameReferenceDateTime","isArray","wcww","center","width","count","functionalGroup","FrameVOILUT","wc","ww","ax","ay","az","bx","by","bz","out","ImageType","constructor","name","MRImageFrameType","FrameType","PixelPresentation","VolumetricProperties","VolumeBasedCalculationTechnique","ComplexImageComponent","AcquisitionContrast"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;IAEMA,U;AACJ,sBAAaC,QAAb,EAAuB;AAAA;;AACrB,SAAKA,QAAL,GAAgBA,QAAhB,CADqB,CACK;AAC1B,SAAKC,OAAL,GAAeC,SAAf,CAFqB,CAEK;AAC3B;;;;gCAuDW;AACV,aAAO,0BAAP;AACD;;;2CAvD6BF,Q,EAAU;AACtC;AACA,UAAIG,oBAAJ;AACAH,eAASI,OAAT,CAAiB,UAASH,OAAT,EAAkB;AACjC,YAAI,CAACA,QAAQI,WAAb,EAA0B;AACxB,iBAAOH,SAAP;AACD;AACD,YAAI,CAACC,WAAL,EAAkB;AACjBA,wBAAcF,QAAQI,WAAtB;AACA;AACD,YAAIJ,QAAQI,WAAR,KAAwBF,WAA5B,EAAyC;AACvCG,kBAAQC,KAAR,CAAc,6BAAd,EAA6CN,QAAQI,WAArD,EAAkEF,WAAlE;AACA,iBAAOD,SAAP;AACD;AACF,OAXD;AAYA,aAAOC,WAAP;AACD;;;6CAE+BA,W,EAAa;AAC3CA,oBAAcA,YAAYK,OAAZ,CAAoB,UAApB,EAA+B,EAA/B,CAAd,CAD2C,CACO;AAClD,UAAIC,QAAQC,yCAAoBC,kBAAhC;AACA,UAAIC,iBAAiB,EAArB;AACAA,qBAAeH,MAAMI,OAArB,IAAgCC,iBAAhC;AACAF,qBAAeH,MAAMM,OAArB,IAAgCC,iBAAhC;AACAJ,qBAAeH,MAAMQ,eAArB,IAAwCC,yBAAxC;AACAN,qBAAeH,MAAMU,8BAArB,IAAuDD,yBAAvD;AACAN,qBAAeH,MAAMW,eAArB,IAAwCC,yBAAxC;AACAT,qBAAeH,MAAMa,8BAArB,IAAuDD,yBAAvD;AACAT,qBAAeH,MAAMc,gBAArB,IAAyCC,0BAAzC;AACAZ,qBAAeH,MAAMgB,QAArB,IAAiCC,kBAAjC;AACAd,qBAAeH,MAAMkB,gBAArB,IAAyCD,kBAAzC;AACAd,qBAAeH,MAAMmB,+BAArB,IAAwDF,kBAAxD;AACAd,qBAAeH,MAAMoB,YAArB,IAAqCC,kBAArC;AACAlB,qBAAeH,MAAMsB,6BAArB,IAAsDC,aAAtD;AACA,aAAOpB,eAAeT,WAAf,CAAP;AACD;;;mCAEoC;AAAA,UAAjB8B,EAAiB,uEAAd,KAAKhC,OAAS;;AACnC,UAAIE,cAAc8B,GAAG5B,WAAH,CAAeG,OAAf,CAAuB,UAAvB,EAAkC,EAAlC,CAAlB,CADmC,CACsB;AACzD,UAAIC,QAAQC,yCAAoBC,kBAAhC;AACA,UAAIuB,uBAAuB,CACzBzB,MAAMW,eADmB,EAEzBX,MAAMa,8BAFmB,EAGzBb,MAAMQ,eAHmB,EAIzBR,MAAMU,8BAJmB,EAKzBV,MAAMc,gBALmB,EAMzBd,MAAMkB,gBANmB,EAOzBlB,MAAMmB,+BAPmB,EAQzBnB,MAAMoB,YARmB,CAA3B;AAUA,aAAQK,qBAAqBC,OAArB,CAA6BhC,WAA7B,MAA8C,CAAC,CAAvD;AACD;;;uCAMyBH,Q,EAAU;AAClC,UAAIG,cAAcJ,WAAWqC,sBAAX,CAAkCpC,QAAlC,CAAlB;AACA,UAAIqC,kBAAkBtC,WAAWuC,wBAAX,CAAoCnC,WAApC,CAAtB;AACA,UAAI,CAACkC,eAAL,EAAsB;AACpB/B,gBAAQC,KAAR,CAAc,yBAAd,EAAyCJ,WAAzC;AACA,eAAOD,SAAP;AACD;AACD,UAAIqC,aAAa,IAAIF,eAAJ,CAAoBrC,QAApB,CAAjB;AACAuC,iBAAWC,SAAX;AACA,aAAOD,WAAWtC,OAAlB;AACD;;;;;;IAGGwC,e;;;;;;;;;;;gCACQ;AACV,WAAKC,mBAAL;AACA,WAAKC,mBAAL;AACD;;;0CAwBqB;AACpB,UAAI,KAAK3C,QAAL,CAAc4C,MAAd,KAAyB,CAAzB,IAA8B7C,WAAW8C,YAAX,CAAwB,KAAK7C,QAAL,CAAc,CAAd,CAAxB,CAAlC,EAA6E;AAC3E;AACA,aAAKC,OAAL,GAAe,KAAKD,QAAL,CAAc,CAAd,CAAf;AACA;AACD;AACD,WAAK8C,UAAL,GAAkB,IAAIC,yBAAJ,CAAiB,KAAK/C,QAAtB,CAAlB;AACA,WAAKC,OAAL,GAAe,KAAK6C,UAAL,CAAgB7C,OAA/B;AACA,UAAIgC,KAAK,KAAKhC,OAAd;AACA;AACA;AACA;AACA,UAAI+C,mBAAmB,KAAKhD,QAAL,CAAc,CAAd,CAAvB;AACAiC,SAAGgB,cAAH,GAAoB,KAAKjD,QAAL,CAAc4C,MAAlC;;AAEA;AACAX,SAAG5B,WAAH,GAAiB2C,iBAAiB3C,WAAlC;AACA4B,SAAGiB,IAAH,GAAUF,iBAAiBE,IAA3B;AACAjB,SAAGkB,OAAH,GAAaH,iBAAiBG,OAA9B;AACAlB,SAAGmB,aAAH,GAAmBJ,iBAAiBI,aAApC;AACAnB,SAAGoB,mBAAH,GAAyBL,iBAAiBK,mBAA1C;AACApB,SAAGqB,YAAH,GAAkBN,iBAAiBM,YAAjB,IAAiC,GAAnD;AACArB,SAAGsB,gBAAH,GAAsBP,iBAAiBO,gBAAjB,IAAqC,GAA3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIC,oBAAoBR,iBAAiBS,oBAAzC;AACA,UAAIC,YAAYV,iBAAiBW,uBAAjB,CAAyCC,KAAzC,CAA+C,CAA/C,EAAiD,CAAjD,CAAhB;AACA,UAAIC,eAAeb,iBAAiBW,uBAAjB,CAAyCC,KAAzC,CAA+C,CAA/C,EAAiD,CAAjD,CAAnB;AACA,UAAIE,WAAWrB,gBAAgBsB,gBAAhB,CAAiCL,SAAjC,EAA2CG,YAA3C,CAAf;AACA,UAAIG,uBAAuB,EAA3B;AACA,WAAKhE,QAAL,CAAcI,OAAd,CAAsB,UAASH,OAAT,EAAkB;AACtC,YAAIgE,WAAWhE,QAAQwD,oBAAR,CAA6BG,KAA7B,EAAf;AACA,YAAIM,iBAAiBzB,gBAAgB0B,YAAhB,CAA6BF,QAA7B,EAAuCT,iBAAvC,CAArB;AACA,YAAIY,WAAW3B,gBAAgB4B,OAAhB,CAAwBH,cAAxB,EAAwCJ,QAAxC,CAAf;AACAE,6BAAqBM,IAArB,CAA0B,CAACF,QAAD,EAAWnE,OAAX,CAA1B;AACD,OALD;AAMA+D,2BAAqBO,IAArB,CAA0B,UAASC,CAAT,EAAWC,CAAX,EAAc;AACtC,eAAQA,EAAE,CAAF,IAAKD,EAAE,CAAF,CAAb;AACD,OAFD;;AAIA;AACA,UAAIvC,GAAGmB,aAAH,KAAqB,EAAzB,EAA6B;AAC3B9C,gBAAQC,KAAR,CAAc,sCAAsCmE,OAAOzE,QAAQmD,aAAf,CAApD;AACD;AACD,UAAIJ,iBAAiB2B,MAAjB,IAA2B,CAAC3B,iBAAiB2B,MAAjB,CAAwBC,SAAxD,EAAmE;AACjEtE,gBAAQuE,IAAR,CAAa,0CAAb;AACA5C,WAAG0C,MAAH,GAAY,EAAC,aAAa,IAAd,EAAZ;AACD,OAHD,MAGO;AACL1C,WAAG0C,MAAH,GAAY,EAAC,aAAa3B,iBAAiB2B,MAAjB,CAAwBC,SAAtC,EAAZ;AACD;AACD,UAAIE,YAAY9B,iBAAiB4B,SAAjB,CAA2BG,UAA3C;AACA9C,SAAG2C,SAAH,GAAe,IAAII,WAAJ,CAAgB/C,GAAGgB,cAAH,GAAoB6B,SAApC,CAAf;AACA,UAAIG,QAAQ,CAAZ;AACAjB,2BAAqB5D,OAArB,CAA6B,UAAS8E,IAAT,EAAe;AAAA,mCAChBA,IADgB;AAAA,YACrCd,QADqC;AAAA,YAC3BnE,OAD2B;;AAE1C,YAAIkF,SAAS,IAAIC,WAAJ,CAAgBnF,QAAQ2E,SAAxB,CAAb;AACA,YAAIS,YAAY,IAAID,WAAJ,CAAgBnD,GAAG2C,SAAnB,EAA8BK,QAAQH,SAAtC,EAAiDA,YAAU,CAA3D,CAAhB;AACA,YAAI;AACFO,oBAAUC,GAAV,CAAcH,MAAd;AACD,SAFD,CAEE,OAAOI,CAAP,EAAU;AACV,cAAIA,aAAaC,UAAjB,EAA6B;AAC3BlF,oBAAQC,KAAR,CAAc,qCAAd;AACAD,oBAAQC,KAAR,CAAc,WAAd,EAA2BuE,SAA3B;AACAxE,oBAAQC,KAAR,CAAc,gBAAd,EAAgC0B,GAAGgB,cAAnC;AACA3C,oBAAQC,KAAR,CAAc,MAAd,EAAsB2E,IAAtB;AACA5E,oBAAQC,KAAR,CAAc,wBAAd,EAAwCN,QAAQ2E,SAAR,CAAkBhC,MAA1D;AACD;AACF;AACDqC;AACD,OAhBD;;AAkBA,UAAIhD,GAAGgB,cAAH,GAAoB,CAAxB,EAA2B;AACzB;AACA3C,gBAAQC,KAAR,CAAc,gEAAd;AACD;;AAnFmB,iDAoFSyD,qBAAqB,CAArB,CApFT;AAAA,UAoFfyB,SApFe;AAAA,UAoFJC,QApFI;;AAAA,kDAqFQ1B,qBAAqB,CAArB,CArFR;AAAA,UAqFf2B,SArFe;AAAA,UAqFJC,QArFI;;AAuFpB;AACA;AACA;;AAEA;;AAEA3D,SAAG4D,8BAAH,GAAoC;AAClCC,kCAA2B;AACzBnC,mCAA0B+B,SAAS/B;AADV,SADO;AAIlCoC,+BAAwB;AACtBC,wBAAeN,SAASM,YADF;AAEtBC,gCAAuBC,KAAKC,GAAL,CAASR,YAAYF,SAArB;AAFD;AAJU,OAApC;;AAUA;;AAEAxD,SAAGmE,gCAAH,GAAsC,EAAtC;AACApC,2BAAqB5D,OAArB,CAA6B,UAAS8E,IAAT,EAAe;AAC1CjD,WAAGmE,gCAAH,CAAoC9B,IAApC,CAAyC;AACvC+B,iCAAwB;AACtB5C,kCAAsByB,KAAK,CAAL,EAAQzB;AADR;AADe,SAAzC;AAKD,OAND;;AAQAxB,SAAGqE,wBAAH,GAA8B;AAC5BC,2BAAoBb,SAASa,iBADD;AAE5BC,oCAA6B,IAAIC,KAAJ,CAAU,KAAKzG,QAAL,CAAc4C,MAAxB;AAFD,OAA9B;;AAKA;AACA;AACA,UAAI8D,eAAe,CAAnB;AACA,WAAK1G,QAAL,CAAcI,OAAd,CAAsB,UAASH,OAAT,EAAkByG,YAAlB,EAAgC;AACpDzE,WAAGmE,gCAAH,CAAoCM,YAApC,EAAkDC,mBAAlD,GAAwE;AACtEC,wBAAc3G,QAAQ2G,YADgD;AAEtEC,uBAAa5G,QAAQ4G;AAFiD,SAAxE;AAIA5E,WAAGqE,wBAAH,CAA4BE,0BAA5B,CAAuDE,YAAvD,IAAuE;AACrEI,8BAAoB7G,QAAQI,WADyC;AAErE0G,oCAA0B9G,QAAQ+G;AAFmC,SAAvE;AAIAN;AACD,OAVD;;AAYA,UAAIO,eAAevG,yCAAoBwG,GAApB,EAAnB;AACA,WAAKjH,OAAL,CAAakH,6BAAb,GAA6C;AAC3CC,kCAA2BH;AADgB,OAA7C;AAGA,WAAKhH,OAAL,CAAaoH,sBAAb,GAAsC,CACpC;AACED,kCAA2BH,YAD7B;AAEEK,+BAAwB,OAF1B;AAGEC,gCAAyB,OAH3B,EAGoC;AAClCC,mCAA4B;AAJ9B,OADoC,CAAtC;AAQD;;;0CAEqB;AACpB,UAAIvF,KAAK,KAAKhC,OAAd;AACA,UAAI,CAACgC,GAAGgB,cAAR,EAAwB;AACtB3C,gBAAQC,KAAR,CAAc,wCAAd;AACA;AACD;AACD,UAAIkH,OAAOxF,GAAGgB,cAAV,MAA8B,CAAlC,EAAqC;AACnC3C,gBAAQC,KAAR,CAAc,yDAAd;AACA;AACD;AACD,UAAI,CAAC0B,GAAGoB,mBAAR,EAA6B;AAC3B;AACApB,WAAGoB,mBAAH,GAAyB,CAAzB;AACD;AACD,UAAI,CAACpB,GAAGyF,OAAJ,IAAezF,GAAGyF,OAAH,KAAe,EAAlC,EAAsC;AACpC;AACAzF,WAAGyF,OAAH,GAAa,aAAb;AACD;;AAED,UAAIC,oBAAoB,CAAC,GAAD,EAAM,GAAN,CAAxB;AACA,UAAIA,kBAAkBxF,OAAlB,CAA0BF,GAAG2F,UAA7B,MAA6C,CAAC,CAAlD,EAAqD;AACnD,eAAO3F,GAAG2F,UAAV;AACD;;AAED,UAAI,CAAC3F,GAAG4F,oBAAR,EAA8B;AAC5B5F,WAAG4F,oBAAH,GAA0B,UAA1B;AACD;;AAED,UAAI,CAAC5F,GAAG4D,8BAAR,EAAwC;AACtCvF,gBAAQC,KAAR,CAAc,sEAAd;AACD;;AAED;AACA,UAAI0B,GAAG6F,gBAAH,KAAwB,UAA5B,EAAwC;AACtC7F,WAAG4D,8BAAH,CAAkCkC,oBAAlC,GAAyD;AACvDC,kCAAwB;AACtBC,uBAAW,SADW;AAEtBC,oCAAwB,KAFF;AAGtBC,yBAAa;AAHS,WAD+B;AAMvDC,2BAAiB;AANsC,SAAzD;AAQD;;AAED,UAAIC,mBAAmBpG,GAAGsB,gBAAH,IAAuB,CAA9C;AACA,UAAI+E,eAAerG,GAAGqB,YAAH,IAAmB,CAAtC;AACArB,SAAG4D,8BAAH,CAAkC0C,gCAAlC,GAAqE;AACnEhF,0BAAkB8E,gBADiD;AAEnE/E,sBAAcgF,YAFqD;AAGnEE,qBAAa;AAHsD,OAArE;;AAMA,UAAIC,cAAc,CAAlB;AACA,WAAKzI,QAAL,CAAcI,OAAd,CAAsB,mBAAS;AAC7B6B,WAAGmE,gCAAH,CAAoCqC,cAAY,CAAhD,EAAmDC,oBAAnD,GAA0E;AACxEC,oCAA0B,CAD8C;AAExEC,mBAAS,CAF+D;AAGxEC,iCAAuBJ,WAHiD;AAIxEK,gCAAsBL;AAJkD,SAA1E;AAMA,YAAIM,YAAY9I,QAAQ+I,eAAR,GAA0B/I,QAAQgJ,eAAlD;AACA,YAAI,CAACC,MAAMH,SAAN,CAAL,EAAuB;AACrB,cAAII,uBAAuBlH,GAAGmE,gCAAH,CAAoCqC,cAAY,CAAhD,EAAmDC,oBAA9E;AACAS,+BAAqBC,wBAArB,GAAgDL,SAAhD;AACAI,+BAAqBE,sBAArB,GAA8CN,SAA9C;AACD;AACDN;AACD,OAdD;;AAiBA;AACA;AACA;AACA,UAAIxG,GAAG2E,YAAH,IAAmB3E,GAAG4E,WAA1B,EAAuC;AACrC;AACA,YAAI,CAACJ,MAAM6C,OAAN,CAAcrH,GAAG2E,YAAjB,CAAL,EAAqC;AACnC3E,aAAG2E,YAAH,GAAkB,CAAC3E,GAAG2E,YAAJ,CAAlB;AACD;AACD,YAAI,CAACH,MAAM6C,OAAN,CAAcrH,GAAG4E,WAAjB,CAAL,EAAoC;AAClC5E,aAAG4E,WAAH,GAAiB,CAAC5E,GAAG4E,WAAJ,CAAjB;AACD;AACF;AACD,UAAI,CAAC5E,GAAG2E,YAAJ,IAAoB,CAAC3E,GAAG4E,WAA5B,EAAyC;AACvC;AACA5E,WAAG2E,YAAH,GAAkB,EAAlB,CAFuC,CAEjB;AACtB3E,WAAG4E,WAAH,GAAiB,EAAjB;AACA;AACA,YAAI5E,GAAGmE,gCAAP,EAAyC;AACvC,cAAImD,OAAO,EAACC,QAAQ,CAAT,EAAYC,OAAO,CAAnB,EAAsBC,OAAO,CAA7B,EAAX;AACAzH,aAAGmE,gCAAH,CAAoChG,OAApC,CAA4C,UAASuJ,eAAT,EAA0B;AACpE,gBAAIA,gBAAgBC,WAApB,EAAiC;AAC/B,kBAAIC,KAAKF,gBAAgBhD,mBAAhB,CAAoCC,YAA7C;AACA,kBAAIkD,KAAKH,gBAAgBhD,mBAAhB,CAAoCE,WAA7C;AACA,kBAAI8C,gBAAgBhD,mBAAhB,IAAuCkD,EAAvC,IAA6CC,EAAjD,EAAqD;AACnD,oBAAIrD,MAAM6C,OAAN,CAAcO,EAAd,CAAJ,EAAuB;AACrBA,uBAAKA,GAAG,CAAH,CAAL;AACD;AACD,oBAAIpD,MAAM6C,OAAN,CAAcQ,EAAd,CAAJ,EAAuB;AACrBA,uBAAKA,GAAG,CAAH,CAAL;AACD;AACDP,qBAAKC,MAAL,IAAe/B,OAAOoC,EAAP,CAAf;AACAN,qBAAKE,KAAL,IAAchC,OAAOqC,EAAP,CAAd;AACAP,qBAAKG,KAAL;AACD;AACF;AACF,WAhBD;AAiBA,cAAIH,KAAKG,KAAL,GAAa,CAAjB,EAAoB;AAClBzH,eAAG2E,YAAH,CAAgBtC,IAAhB,CAAqBI,OAAO6E,KAAKC,MAAL,GAAcD,KAAKG,KAA1B,CAArB;AACAzH,eAAG4E,WAAH,CAAevC,IAAf,CAAoBI,OAAO6E,KAAKE,KAAL,GAAaF,KAAKG,KAAzB,CAApB;AACD;AACF;AACF;AACD;AACA,UAAIzH,GAAG2E,YAAH,CAAgBhE,MAAhB,KAA2B,CAA/B,EAAkC;AAAEX,WAAG2E,YAAH,GAAkB,CAAC,GAAD,CAAlB;AAA0B;AAC9D,UAAI3E,GAAG4E,WAAH,CAAejE,MAAf,KAA0B,CAA9B,EAAiC;AAAEX,WAAG4E,WAAH,GAAiB,CAAC,GAAD,CAAjB;AAAyB;AAC7D;;;qCA7RuBrC,C,EAAGC,C,EAAG;AAC5B,UAAIsF,KAAKvF,EAAE,CAAF,CAAT;AAAA,UAAewF,KAAKxF,EAAE,CAAF,CAApB;AAAA,UAA0ByF,KAAKzF,EAAE,CAAF,CAA/B;AAAA,UACI0F,KAAKzF,EAAE,CAAF,CADT;AAAA,UACe0F,KAAK1F,EAAE,CAAF,CADpB;AAAA,UAC0B2F,KAAK3F,EAAE,CAAF,CAD/B;AAEA,UAAI4F,MAAM,EAAV;AACAA,UAAI,CAAJ,IAASL,KAAKI,EAAL,GAAUH,KAAKE,EAAxB;AACAE,UAAI,CAAJ,IAASJ,KAAKC,EAAL,GAAUH,KAAKK,EAAxB;AACAC,UAAI,CAAJ,IAASN,KAAKI,EAAL,GAAUH,KAAKE,EAAxB;AACA,aAAOG,GAAP;AACD;;;iCAEmB7F,C,EAAGC,C,EAAG;AACxB,UAAI4F,MAAM,EAAV;AACAA,UAAI,CAAJ,IAAS7F,EAAE,CAAF,IAAOC,EAAE,CAAF,CAAhB;AACA4F,UAAI,CAAJ,IAAS7F,EAAE,CAAF,IAAOC,EAAE,CAAF,CAAhB;AACA4F,UAAI,CAAJ,IAAS7F,EAAE,CAAF,IAAOC,EAAE,CAAF,CAAhB;AACA,aAAO4F,GAAP;AACD;;;4BAEc7F,C,EAAGC,C,EAAG;AACnB,aAAQD,EAAE,CAAF,IAAOC,EAAE,CAAF,CAAP,GAAcD,EAAE,CAAF,IAAOC,EAAE,CAAF,CAArB,GAA4BD,EAAE,CAAF,IAAOC,EAAE,CAAF,CAA3C;AACD;;;;EA1B2B1E,U;;IAsSxBiB,iB;;;;;;;;;;;gCACQ;AACV;AACA;AACA,UAAIP,QAAQC,yCAAoBC,kBAAhC;AACA,WAAKV,OAAL,CAAaI,WAAb,GAA2B,gCAA3B;AACA;AACD;;;0CAEqB;AACpB;AACA,UAAI4B,KAAK,KAAKhC,OAAd;;AAEA,UAAI,CAACgC,GAAGqI,SAAJ,IACA,CAACrI,GAAGqI,SAAH,CAAaC,WADd,IAEAtI,GAAGqI,SAAH,CAAaC,WAAb,CAAyBC,IAAzB,IAAiC,OAFjC,IAGAvI,GAAGqI,SAAH,CAAa1H,MAAb,IAAuB,CAH3B,EAG8B;AAC5BX,WAAGqI,SAAH,GAAe,CAAC,UAAD,EAAa,SAAb,EAAwB,OAAxB,EAAiC,MAAjC,CAAf;AACD;;AAEDrI,SAAG4D,8BAAH,CAAkC4E,gBAAlC,GAAqD;AACnDC,mBAAWzI,GAAGqI,SADqC;AAEnDK,2BAAmB,YAFgC;AAGnDC,8BAAsB,QAH6B;AAInDC,yCAAiC,MAJkB;AAKnDC,+BAAuB,WAL4B;AAMnDC,6BAAqB;AAN8B,OAArD;AAQD;;;;EA5B6BtI,e;;IA+B1BvB,yB;;;;;;;;;;;gCACQ;AACV;AACD;;;;EAHqCuB,e;;IAMlCpB,yB;;;;;;;;;;;gCACQ;AACV;AACD;;;;EAHqCoB,e;;IAMlCjB,0B;;;;;;;;;;;gCACQ;AACV;AACD;;;;EAHsCiB,e;;IAMnC3B,iB;;;;;;;;;;;gCACQ;AACV;AACA;AACA,UAAIL,QAAQC,yCAAoBC,kBAAhC;AACA;AACA,WAAKV,OAAL,CAAaI,WAAb,GAA2BI,MAAMQ,eAAjC;AACD;;;;EAP6BwB,e;;IAU1Bf,kB;;;;;;;;;;;gCACQ;AACV;AACA;AACA,UAAIjB,QAAQC,yCAAoBC,kBAAhC;AACA;AACA,WAAKV,OAAL,CAAaI,WAAb,GAA2BI,MAAMkB,gBAAjC;AACD;;;;EAP8Bc,e;;IAU3BX,kB;;;;;;;;;;;gCACQ;AACV;AACD;;;;EAH8BW,e;;IAM3BT,a;;;;;;;;;;;gCACQ;AACV,WAAK/B,OAAL,GAAe,KAAKD,QAAL,CAAc,CAAd,CAAf,CADU,CACuB;AAClC;;;;EAHyBD,U;;QAMnBA,U,GAAAA,U;QACA0C,e,GAAAA,e;QACAzB,iB,GAAAA,iB;QACAE,yB,GAAAA,yB;QACAG,yB,GAAAA,yB;QACAG,0B,GAAAA,0B;QACAV,iB,GAAAA,iB;QACAY,kB,GAAAA,kB;QACAI,kB,GAAAA,kB;QACAE,a,GAAAA,a","file":"dcmjs.e795e92eeca230768068.hot-update.js","sourcesContent":["import { DicomMetaDictionary } from './DicomMetaDictionary.js';\nimport { DerivedImage } from './derivations.js';\n\nclass Normalizer {\n  constructor (datasets) {\n    this.datasets = datasets; // one or more dicom-like object instances\n    this.dataset = undefined; // a normalized multiframe dicom object instance\n  }\n\n  static consistentSOPClassUIDs(datasets) {\n    // return sopClassUID if all exist and match, otherwise undefined\n    let sopClassUID;\n    datasets.forEach(function(dataset) {\n      if (!dataset.SOPClassUID) {\n        return(undefined);\n      }\n      if (!sopClassUID) {\n       sopClassUID = dataset.SOPClassUID;\n      }\n      if (dataset.SOPClassUID !== sopClassUID) {\n        console.error('inconsistent sopClassUIDs: ', dataset.SOPClassUID, sopClassUID);\n        return(undefined);\n      }\n    });\n    return(sopClassUID);\n  }\n\n  static normalizerForSOPClassUID(sopClassUID) {\n    sopClassUID = sopClassUID.replace(/[^0-9.]/g,''); // TODO: clean all VRs as part of normalizing\n    let toUID = DicomMetaDictionary.sopClassUIDsByName;\n    let sopClassUIDMap = {};\n    sopClassUIDMap[toUID.CTImage] = CTImageNormalizer;\n    sopClassUIDMap[toUID.MRImage] = MRImageNormalizer;\n    sopClassUIDMap[toUID.EnhancedCTImage] = EnhancedCTImageNormalizer;\n    sopClassUIDMap[toUID.LegacyConvertedEnhancedCTImage] = EnhancedCTImageNormalizer;\n    sopClassUIDMap[toUID.EnhancedMRImage] = EnhancedMRImageNormalizer;\n    sopClassUIDMap[toUID.LegacyConvertedEnhancedMRImage] = EnhancedMRImageNormalizer;\n    sopClassUIDMap[toUID.EnhancedUSVolume] = EnhancedUSVolumeNormalizer;\n    sopClassUIDMap[toUID.PETImage] = PETImageNormalizer;\n    sopClassUIDMap[toUID.EnhancedPETImage] = PETImageNormalizer;\n    sopClassUIDMap[toUID.LegacyConvertedEnhancedPETImage] = PETImageNormalizer;\n    sopClassUIDMap[toUID.Segmentation] = SEGImageNormalizer;\n    sopClassUIDMap[toUID.DeformableSpatialRegistration] = DSRNormalizer;\n    return(sopClassUIDMap[sopClassUID]);\n  }\n\n  static isMultiframe(ds=this.dataset) {\n    let sopClassUID = ds.SOPClassUID.replace(/[^0-9.]/g,''); // TODO: clean all VRs as part of normalizing\n    let toUID = DicomMetaDictionary.sopClassUIDsByName;\n    let multiframeSOPClasses = [\n      toUID.EnhancedMRImage,\n      toUID.LegacyConvertedEnhancedMRImage,\n      toUID.EnhancedCTImage,\n      toUID.LegacyConvertedEnhancedCTImage,\n      toUID.EnhancedUSVolume,\n      toUID.EnhancedPETImage,\n      toUID.LegacyConvertedEnhancedPETImage,\n      toUID.Segmentation,\n    ];\n    return (multiframeSOPClasses.indexOf(sopClassUID) !== -1);\n  }\n\n  normalize() {\n    return(\"No normalization defined\");\n  }\n\n  static normalizeToDataset(datasets) {\n    let sopClassUID = Normalizer.consistentSOPClassUIDs(datasets);\n    let normalizerClass = Normalizer.normalizerForSOPClassUID(sopClassUID);\n    if (!normalizerClass) {\n      console.error('no normalizerClass for ', sopClassUID);\n      return(undefined);\n    }\n    let normalizer = new normalizerClass(datasets);\n    normalizer.normalize();\n    return(normalizer.dataset);\n  }\n}\n\nclass ImageNormalizer extends Normalizer {\n  normalize() {\n    this.convertToMultiframe();\n    this.normalizeMultiframe();\n  }\n\n  static vec3CrossProduct(a, b) {\n    let ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n    let out = [];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n  }\n\n  static vec3Subtract(a, b) {\n    let out = [];\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n  }\n\n  static vec3Dot(a, b) {\n    return (a[0] * b[0] + a[1] * b[1] + a[2] * b[2]);\n  }\n\n  convertToMultiframe() {\n    if (this.datasets.length === 1 && Normalizer.isMultiframe(this.datasets[0])) {\n      // already a multiframe, so just use it\n      this.dataset = this.datasets[0];\n      return;\n    }\n    this.derivation = new DerivedImage(this.datasets);\n    this.dataset = this.derivation.dataset;\n    let ds = this.dataset;\n    // create a new multiframe from the source datasets\n    // fill in only those elements required to make a valid image\n    // for volumetric processing\n    let referenceDataset = this.datasets[0];\n    ds.NumberOfFrames = this.datasets.length;\n\n    // TODO: develop sets of elements to copy over in loops\n    ds.SOPClassUID = referenceDataset.SOPClassUID;\n    ds.Rows = referenceDataset.Rows;\n    ds.Columns = referenceDataset.Columns;\n    ds.BitsAllocated = referenceDataset.BitsAllocated;\n    ds.PixelRepresentation = referenceDataset.PixelRepresentation;\n    ds.RescaleSlope = referenceDataset.RescaleSlope || \"1\";\n    ds.RescaleIntercept = referenceDataset.RescaleIntercept || \"0\";\n    //ds.BurnedInAnnotation = referenceDataset.BurnedInAnnotation || \"YES\";\n\n    // sort\n    // https://github.com/pieper/Slicer3/blob/master/Base/GUI/Tcl/LoadVolume.tcl\n    // TODO: add spacing checks:\n    // https://github.com/Slicer/Slicer/blob/master/Modules/Scripted/DICOMPlugins/DICOMScalarVolumePlugin.py#L228-L250\n    // TODO: put this information into the Shared and PerFrame functional groups\n    // TODO: sorting of frames could happen in normalizeMultiframe instead, since other\n    // multiframe converters may not sort the images\n    // TODO: sorting can be seen as part of generation of the Dimension Multiframe Dimension Module\n    // and should really be done in an acquisition-specific way (e.g. for DCE)\n    let referencePosition = referenceDataset.ImagePositionPatient;\n    let rowVector = referenceDataset.ImageOrientationPatient.slice(0,3);\n    let columnVector = referenceDataset.ImageOrientationPatient.slice(3,6);\n    let scanAxis = ImageNormalizer.vec3CrossProduct(rowVector,columnVector);\n    let distanceDatasetPairs = [];\n    this.datasets.forEach(function(dataset) {\n      let position = dataset.ImagePositionPatient.slice();\n      let positionVector = ImageNormalizer.vec3Subtract(position, referencePosition);\n      let distance = ImageNormalizer.vec3Dot(positionVector, scanAxis);\n      distanceDatasetPairs.push([distance, dataset]);\n    });\n    distanceDatasetPairs.sort(function(a,b) {\n      return (b[0]-a[0]);\n    });\n\n    // assign array buffers\n    if (ds.BitsAllocated !== 16) {\n      console.error('Only works with 16 bit data, not ' + String(dataset.BitsAllocated));\n    }\n    if (referenceDataset._vrMap && !referenceDataset._vrMap.PixelData) {\n      console.warn('No vr map given for pixel data, using OW');\n      ds._vrMap = {'PixelData': 'OW'};\n    } else {\n      ds._vrMap = {'PixelData': referenceDataset._vrMap.PixelData};\n    }\n    let frameSize = referenceDataset.PixelData.byteLength;\n    ds.PixelData = new ArrayBuffer(ds.NumberOfFrames * frameSize);\n    let frame = 0;\n    distanceDatasetPairs.forEach(function(pair) {\n      let [distance, dataset] = pair;\n      let pixels = new Uint16Array(dataset.PixelData);\n      let frameView = new Uint16Array(ds.PixelData, frame * frameSize, frameSize/2);\n      try {\n        frameView.set(pixels);\n      } catch (e) {\n        if (e instanceof RangeError) {\n          console.error(\"Error inserting pixels in PixelData\");\n          console.error(\"frameSize\", frameSize);\n          console.error(\"NumberOfFrames\", ds.NumberOfFrames);\n          console.error(\"pair\", pair);\n          console.error(\"dataset PixelData size\", dataset.PixelData.length);\n        }\n      }\n      frame++;\n    });\n\n    if (ds.NumberOfFrames < 2) {\n      // TODO\n      console.error('Cannot populate shared groups uniquely without multiple frames');\n    }\n    let [distance0, dataset0]  = distanceDatasetPairs[0];\n    let [distance1, dataset1] = distanceDatasetPairs[1];\n\n    //\n    // make the functional groups\n    //\n\n    // shared\n\n    ds.SharedFunctionalGroupsSequence = {\n      PlaneOrientationSequence : {\n        ImageOrientationPatient : dataset0.ImageOrientationPatient,\n      },\n      PixelMeasuresSequence : {\n        PixelSpacing : dataset0.PixelSpacing,\n        SpacingBetweenSlices : Math.abs(distance1 - distance0),\n      },\n    };\n\n    // per-frame\n\n    ds.PerFrameFunctionalGroupsSequence = [];\n    distanceDatasetPairs.forEach(function(pair) {\n      ds.PerFrameFunctionalGroupsSequence.push({\n        PlanePositionSequence : {\n          ImagePositionPatient: pair[1].ImagePositionPatient,\n        },\n      });\n    });\n\n    ds.ReferencedSeriesSequence = {\n      SeriesInstanceUID : dataset0.SeriesInstanceUID,\n      ReferencedInstanceSequence : new Array(this.datasets.length),\n    };\n\n    // copy over each datasets window/level into the per-frame groups\n    // and set the referenced series uid\n    let datasetIndex = 0;\n    this.datasets.forEach(function(dataset, datasetIndex) {\n      ds.PerFrameFunctionalGroupsSequence[datasetIndex].FrameVOILUTSequence = {\n        WindowCenter: dataset.WindowCenter,\n        WindowWidth: dataset.WindowWidth,\n      };\n      ds.ReferencedSeriesSequence.ReferencedInstanceSequence[datasetIndex] = {\n        ReferencedSOPClass: dataset.SOPClassUID,\n        ReferencedSOPInstanceUID: dataset.SOPInstanceUID,\n      };\n      datasetIndex++;\n    });\n\n    let dimensionUID = DicomMetaDictionary.uid();\n    this.dataset.DimensionOrganizationSequence = {\n      DimensionOrganizationUID : dimensionUID\n    };\n    this.dataset.DimensionIndexSequence = [\n      {\n        DimensionOrganizationUID : dimensionUID,\n        DimensionIndexPointer : 2097202,\n        FunctionalGroupPointer : 2134291, // PlanePositionSequence\n        DimensionDescriptionLabel : \"ImagePositionPatient\"\n      },\n    ];\n  }\n\n  normalizeMultiframe() {\n    let ds = this.dataset;\n    if (!ds.NumberOfFrames) {\n      console.error(\"Missing number or frames not supported\");\n      return;\n    }\n    if (Number(ds.NumberOfFrames) === 1) {\n      console.error(\"Single frame instance of multiframe class not supported\");\n      return;\n    }\n    if (!ds.PixelRepresentation) {\n      // Required tag: guess signed\n      ds.PixelRepresentation = 1;\n    }\n    if (!ds.StudyID || ds.StudyID === \"\") {\n      // Required tag: fill in if needed\n      ds.StudyID = \"No Study ID\";\n    }\n\n    let validLateralities = [\"R\", \"L\"];\n    if (validLateralities.indexOf(ds.Laterality) === -1) {\n      delete(ds.Laterality);\n    }\n\n    if (!ds.PresentationLUTShape) {\n      ds.PresentationLUTShape = \"IDENTITY\";\n    }\n\n    if (!ds.SharedFunctionalGroupsSequence) {\n      console.error('Can only process multiframe data with SharedFunctionalGroupsSequence');\n    }\n\n    // TODO: special case!\n    if (ds.BodyPartExamined === \"PROSTATE\") {\n      ds.SharedFunctionalGroupsSequence.FrameAnatomySequence = {\n        AnatomicRegionSequence: {\n          CodeValue: \"T-9200B\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Prostate\",\n        },\n        FrameLaterality: \"U\",\n      };\n    }\n\n    let rescaleIntercept = ds.RescaleIntercept || 0;\n    let rescaleSlope = ds.RescaleSlope || 1;\n    ds.SharedFunctionalGroupsSequence.PixelValueTransformationSequence = {\n      RescaleIntercept: rescaleIntercept,\n      RescaleSlope: rescaleSlope,\n      RescaleType: \"US\",\n    };\n\n    let frameNumber = 1;\n    this.datasets.forEach(dataset=>{\n      ds.PerFrameFunctionalGroupsSequence[frameNumber-1].FrameContentSequence = {\n        FrameAcquisitionDuration: 0,\n        StackID: 1,\n        InStackPositionNumber: frameNumber,\n        DimensionIndexValues: frameNumber,\n      };\n      let frameTime = dataset.AcquisitionDate + dataset.AcquisitionTime;\n      if (!isNaN(frameTime)) {\n        let frameContentSequence = ds.PerFrameFunctionalGroupsSequence[frameNumber-1].FrameContentSequence;\n        frameContentSequence.FrameAcquisitionDateTime = frameTime;\n        frameContentSequence.FrameReferenceDateTime = frameTime;\n      }\n      frameNumber++;\n    });\n\n\n    //\n    // TODO: convert this to shared functional group not top level element\n    //\n    if (ds.WindowCenter && ds.WindowWidth) {\n      // if they exist as single values, make them lists for consistency\n      if (!Array.isArray(ds.WindowCenter)) {\n        ds.WindowCenter = [ds.WindowCenter];\n      }\n      if (!Array.isArray(ds.WindowWidth)) {\n        ds.WindowWidth = [ds.WindowWidth];\n      }\n    }\n    if (!ds.WindowCenter || !ds.WindowWidth) {\n      // if they don't exist, make them empty lists and try to initialize them\n      ds.WindowCenter = []; // both must exist and be the same length\n      ds.WindowWidth = [];\n      // provide a volume-level window/level guess (mean of per-frame)\n      if (ds.PerFrameFunctionalGroupsSequence) {\n        let wcww = {center: 0, width: 0, count: 0};\n        ds.PerFrameFunctionalGroupsSequence.forEach(function(functionalGroup) {\n          if (functionalGroup.FrameVOILUT) {\n            let wc = functionalGroup.FrameVOILUTSequence.WindowCenter;\n            let ww = functionalGroup.FrameVOILUTSequence.WindowWidth;\n            if (functionalGroup.FrameVOILUTSequence && wc && ww) {\n              if (Array.isArray(wc)) {\n                wc = wc[0];\n              }\n              if (Array.isArray(ww)) {\n                ww = ww[0];\n              }\n              wcww.center += Number(wc);\n              wcww.width += Number(ww);\n              wcww.count++;\n            }\n          }\n        });\n        if (wcww.count > 0) {\n          ds.WindowCenter.push(String(wcww.center / wcww.count));\n          ds.WindowWidth.push(String(wcww.width / wcww.count));\n        }\n      }\n    }\n    // last gasp, pick an arbitrary default\n    if (ds.WindowCenter.length === 0) { ds.WindowCenter = [300]; }\n    if (ds.WindowWidth.length === 0) { ds.WindowWidth = [500]; }\n  }\n}\n\nclass MRImageNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n    // TODO: make specialization for LegacyConverted vs normal EnhanceMRImage\n    let toUID = DicomMetaDictionary.sopClassUIDsByName;\n    this.dataset.SOPClassUID = \"LegacyConvertedEnhancedMRImage\";\n    //this.dataset.SOPClassUID = toUID.EnhancedMRImage;\n  }\n\n  normalizeMultiframe() {\n    super.normalizeMultiframe();\n    let ds = this.dataset;\n\n    if (!ds.ImageType ||\n        !ds.ImageType.constructor ||\n        ds.ImageType.constructor.name != \"Array\" ||\n        ds.ImageType.length != 4) {\n      ds.ImageType = [\"ORIGINAL\", \"PRIMARY\", \"OTHER\", \"NONE\",];\n    }\n\n    ds.SharedFunctionalGroupsSequence.MRImageFrameType = {\n      FrameType: ds.ImageType,\n      PixelPresentation: \"MONOCHROME\",\n      VolumetricProperties: \"VOLUME\",\n      VolumeBasedCalculationTechnique: \"NONE\",\n      ComplexImageComponent: \"MAGNITUDE\",\n      AcquisitionContrast: \"UNKNOWN\",\n    };\n  }\n}\n\nclass EnhancedCTImageNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n  }\n}\n\nclass EnhancedMRImageNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n  }\n}\n\nclass EnhancedUSVolumeNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n  }\n}\n\nclass CTImageNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n    // TODO: provide option at export to swap in LegacyConverted UID\n    let toUID = DicomMetaDictionary.sopClassUIDsByName;\n    //this.dataset.SOPClassUID = \"LegacyConvertedEnhancedCTImage\";\n    this.dataset.SOPClassUID = toUID.EnhancedCTImage;\n  }\n}\n\nclass PETImageNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n    // TODO: provide option at export to swap in LegacyConverted UID\n    let toUID = DicomMetaDictionary.sopClassUIDsByName;\n    //this.dataset.SOPClassUID = \"LegacyConvertedEnhancedPETImage\";\n    this.dataset.SOPClassUID = toUID.EnhancedPETImage;\n  }\n}\n\nclass SEGImageNormalizer extends ImageNormalizer {\n  normalize() {\n    super.normalize();\n  }\n}\n\nclass DSRNormalizer extends Normalizer {\n  normalize() {\n    this.dataset = this.datasets[0]; // only one dataset per series and for now we assume it is normalized\n  }\n}\n\nexport { Normalizer };\nexport { ImageNormalizer };\nexport { MRImageNormalizer };\nexport { EnhancedCTImageNormalizer };\nexport { EnhancedMRImageNormalizer };\nexport { EnhancedUSVolumeNormalizer };\nexport { CTImageNormalizer };\nexport { PETImageNormalizer };\nexport { SEGImageNormalizer };\nexport { DSRNormalizer };\n"],"sourceRoot":""}