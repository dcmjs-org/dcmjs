{"version":3,"sources":["webpack://dcmjs/./derivations.js"],"names":["DerivedDataset","datasets","options","JSON","parse","stringify","o","Manufacturer","ManufacturerModelName","SeriesDescription","SeriesNumber","SoftwareVersions","DeviceSerialNumber","date","DicomMetaDictionary","time","SeriesDate","SeriesTime","ContentDate","ContentTime","SOPInstanceUID","uid","SeriesInstanceUID","ClinicalTrialTimePointID","ClinicalTrialCoordinatingCenterName","ClinicalTrialSeriesID","ImageComments","ContentQualification","referencedDatasets","referencedDataset","dataset","_vrMap","_meta","derive","data","Object","keys","forEach","key","tags","tag","assignFromReference","assignFromOptions","DerivedPixels","ContentLabel","ContentDescription","ContentCreatorName","assignToDataset","SharedFunctionalGroupsSequence","copyDataset","PerFrameFunctionalGroupsSequence","PixelData","ArrayBuffer","byteLength","DerivedImage","Segmentation","includeSliceSpacing","console","log","sopClassUIDsByName","dimensionUID","DimensionOrganizationSequence","DimensionOrganizationUID","DimensionIndexSequence","DimensionIndexPointer","FunctionalGroupPointer","DimensionDescriptionLabel","SegmentSequence","ReferencedSeriesSequence","ReferencedInstanceSequence","ReferencedSOPClassUID","SOPClassUID","ReferencedSOPInstanceUID","frameIndex","NumberOfFrames","DerivationImageSequence","SourceImageSequence","ReferencedFrameNumber","PurposeOfReferenceCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","DerivationCodeSequence","FrameContentSequence","DimensionIndexValues","SegmentIdentificationSequence","ReferencedSegmentNumber","group","FrameVOILUTSequence","PixelMeasuresSequence","SpacingBetweenSlices","Segment","SegmentLabel","SegmentedPropertyCategoryCodeSequence","SegmentedPropertyTypeCodeSequence","SegmentAlgorithmType","Error","toUpperCase","SegmentAlgorithmName","SegmentNumber","length","push","segmentNumber","splice","i","StructuredReport","EnhancedSR"],"mappings":"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","file":"dcmjs.d8e04507504fbb7058fc.hot-update.js","sourcesContent":["import { DicomMetaDictionary } from './DicomMetaDictionary.js';\n\nclass DerivedDataset {\n  constructor (datasets, options={}) {\n    this.options = JSON.parse(JSON.stringify(options));\n    let o = this.options;\n\n    o.Manufacturer = options.Manufacturer || \"Unspecified\";\n    o.ManufacturerModelName = options.ManufacturerModelName || \"Unspecified\";\n    o.SeriesDescription = options.SeriesDescription || \"Research Derived series\";\n    o.SeriesNumber = options.SeriesNumber || \"99\";\n    o.SoftwareVersions = options.SoftwareVersions || \"0\";\n    o.DeviceSerialNumber = options.DeviceSerialNumber || \"1\";\n\n    let date = DicomMetaDictionary.date();\n    let time = DicomMetaDictionary.time();\n\n    o.SeriesDate = options.SeriesDate || date;\n    o.SeriesTime = options.SeriesTime || time;\n    o.ContentDate = options.ContentDate || date;\n    o.ContentTime = options.ContentTime || time;\n\n    o.SOPInstanceUID = options.SOPInstanceUID || DicomMetaDictionary.uid();\n    o.SeriesInstanceUID = options.SeriesInstanceUID || DicomMetaDictionary.uid();\n\n    o.ClinicalTrialTimePointID = options.ClinicalTrialTimePointID || \"\";\n    o.ClinicalTrialCoordinatingCenterName = options.ClinicalTrialCoordinatingCenterName || \"\";\n    o.ClinicalTrialSeriesID = options.ClinicalTrialSeriesID || \"\";\n\n    o.ImageComments = options.ImageComments || \"NOT FOR CLINICAL USE\";\n    o.ContentQualification = \"RESEARCH\";\n\n    this.referencedDatasets = datasets; // list of one or more dicom-like object instances\n    this.referencedDataset = this.referencedDatasets[0];\n    this.dataset = {\n      _vrMap: this.referencedDataset._vrMap,\n      _meta: this.referencedDataset._meta,\n    };\n\n    this.derive();\n  }\n\n  assignToDataset(data) {\n    Object.keys(data).forEach(key=>this.dataset[key] = data[key]);\n  }\n\n  assignFromReference(tags) {\n    tags.forEach(tag=>this.dataset[tag] = this.referencedDataset[tag] || \"\");\n  }\n\n  assignFromOptions(tags) {\n    tags.forEach(tag=>this.dataset[tag] = this.options[tag] || \"\");\n  }\n\n  derive() {\n    // common for all instances in study\n    this.assignFromReference([\n      \"AccessionNumber\",\n      \"ReferringPhysicianName\",\n      \"StudyDate\",\n      \"StudyID\",\n      \"StudyTime\",\n      \"PatientName\",\n      \"PatientID\",\n      \"PatientBirthDate\",\n      \"PatientSex\",\n      \"PatientAge\",\n      \"StudyInstanceUID\",\n      \"StudyID\",]);\n\n    this.assignFromOptions([\n      \"Manufacturer\",\n      \"SoftwareVersions\",\n      \"DeviceSerialNumber\",\n      \"ManufacturerModelName\",\n      \"SeriesDescription\",\n      \"SeriesNumber\",\n      \"ImageComments\",\n      \"SeriesDate\",\n      \"SeriesTime\",\n      \"ContentDate\",\n      \"ContentTime\",\n      \"ContentQualification\",\n      \"SOPInstanceUID\",\n      \"SeriesInstanceUID\",]);\n  }\n\n  static copyDataset(dataset) {\n    // copies everything but the buffers\n    return(JSON.parse(JSON.stringify(dataset)));\n  }\n}\n\nclass DerivedPixels extends DerivedDataset {\n  constructor (datasets, options={}) {\n    super(datasets, options);\n    let o = this.options;\n\n    o.ContentLabel = options.ContentLabel || \"\";\n    o.ContentDescription = options.ContentDescription || \"\";\n    o.ContentCreatorName = options.ContentCreatorName || \"\";\n\n  }\n\n  // this assumes a normalized multiframe input and will create\n  // a multiframe derived image\n  derive() {\n    super.derive();\n\n    this.assignToDataset({\n      \"ImageType\": [\n        \"DERIVED\",\n        \"PRIMARY\"\n      ],\n      \"LossyImageCompression\": \"00\",\n      \"InstanceNumber\": \"1\",\n    });\n\n    this.assignFromReference([\n      \"SOPClassUID\",\n      \"Modality\",\n      \"FrameOfReferenceUID\",\n      \"PositionReferenceIndicator\",\n      \"NumberOfFrames\",\n      \"Rows\",\n      \"Columns\",\n      \"SamplesPerPixel\",\n      \"PhotometricInterpretation\",\n      \"BitsStored\",\n      \"HighBit\",\n    ]);\n\n    this.assignFromOptions([\n      \"ContentLabel\",\n      \"ContentDescription\",\n      \"ContentCreatorName\",\n    ]);\n\n    //\n    // TODO: more carefully copy only PixelMeasures and related\n    // TODO: add derivation references\n    //\n    if (this.referencedDataset.SharedFunctionalGroupsSequence) {\n      this.dataset.SharedFunctionalGroupsSequence =\n                    DerivedDataset.copyDataset(\n                      this.referencedDataset.SharedFunctionalGroupsSequence);\n    }\n    if (this.referencedDataset.PerFrameFunctionalGroupsSequence) {\n      this.dataset.PerFrameFunctionalGroupsSequence =\n                    DerivedDataset.copyDataset(\n                      this.referencedDataset.PerFrameFunctionalGroupsSequence);\n    }\n\n    // make an array of zeros for the pixels\n    this.dataset.PixelData = new ArrayBuffer(this.referencedDataset.PixelData.byteLength);\n  }\n}\n\nclass DerivedImage extends DerivedPixels {\n  constructor (datasets, options={}) {\n    super(datasets, options);\n  }\n\n  derive() {\n    super.derive();\n    this.assignFromReference([\n      \"WindowCenter\",\n      \"WindowWidth\",\n      \"BitsAllocated\",\n      \"PixelRepresentation\",\n      \"BodyPartExamined\",\n      \"Laterality\",\n      \"PatientPosition\",\n      \"RescaleSlope\",\n      \"RescaleIntercept\",\n      \"PixelPresentation\",\n      \"VolumetricProperties\",\n      \"VolumeBasedCalculationTechnique\",\n      \"PresentationLUTShape\",\n    ]);\n  }\n}\n\nclass Segmentation extends DerivedPixels {\n  constructor (datasets, options={includeSliceSpacing: true}) {\n    super(datasets, options);\n  }\n\n  derive() {\n    super.derive();\n\n    console.log('TEST:');\n    console.log(this.referencedDataset['00180050']);\n    console.log(this.referencedDataset['00289110']);\n\n    this.assignFromReference([\n      \"SliceThickness\"\n    ]);\n\n    this.assignToDataset({\n      \"SOPClassUID\": DicomMetaDictionary.sopClassUIDsByName.Segmentation,\n      \"Modality\": \"SEG\",\n      \"SamplesPerPixel\": \"1\",\n      \"PhotometricInterpretation\": \"MONOCHROME2\",\n      \"BitsAllocated\": \"1\",\n      \"BitsStored\": \"1\",\n      \"HighBit\": \"0\",\n      \"PixelRepresentation\": \"0\",\n      \"LossyImageCompression\": \"00\",\n      \"SegmentationType\": \"BINARY\",\n      \"ContentLabel\": \"EXAMPLE\",\n    });\n\n    let dimensionUID = DicomMetaDictionary.uid();\n    this.dataset.DimensionOrganizationSequence = {\n      DimensionOrganizationUID : dimensionUID\n    };\n    this.dataset.DimensionIndexSequence = [\n      {\n        DimensionOrganizationUID : dimensionUID,\n        DimensionIndexPointer : 6422539,\n        FunctionalGroupPointer : 6422538, // SegmentIdentificationSequence\n        DimensionDescriptionLabel : \"ReferencedSegmentNumber\"\n      },\n      {\n        DimensionOrganizationUID : dimensionUID,\n        DimensionIndexPointer : 2097202,\n        FunctionalGroupPointer : 2134291, // PlanePositionSequence\n        DimensionDescriptionLabel : \"ImagePositionPatient\"\n      }\n    ];\n\n    this.dataset.SegmentSequence = [];\n\n    // TODO: check logic here.\n    // If the referenced dataset itself references a series, then copy.\n    // Otherwise, reference the dataset itself.\n    // This should allow Slicer and others to get the correct original\n    // images when loading Legacy Converted Images, but it's a workaround\n    // that really doesn't belong here.\n    if (this.referencedDataset.ReferencedSeriesSequence) {\n      this.dataset.ReferencedSeriesSequence =\n                    DerivedDataset.copyDataset(\n                      this.referencedDataset.ReferencedSeriesSequence);\n    } else {\n      this.dataset.ReferencedSeriesSequence = {\n        SeriesInstanceUID : this.referencedDataset.SeriesInstanceUID,\n        ReferencedInstanceSequence : [{\n          ReferencedSOPClassUID: this.referencedDataset.SOPClassUID,\n          ReferencedSOPInstanceUID: this.referencedDataset.SOPInstanceUID,\n        }]\n      };\n    }\n\n    // handle the case of a converted multiframe, so point to original source\n    // TODO: only a single segment is created now\n    for (let frameIndex = 0; frameIndex < this.dataset.NumberOfFrames; frameIndex++) {\n      this.dataset.PerFrameFunctionalGroupsSequence[frameIndex].DerivationImageSequence = {\n        SourceImageSequence: {\n          ReferencedSOPClassUID: this.referencedDataset.SOPClassUID,\n          ReferencedSOPInstanceUID: this.referencedDataset.SOPInstanceUID,\n          ReferencedFrameNumber: frameIndex+1,\n          PurposeOfReferenceCodeSequence: {\n            CodeValue: \"121322\",\n            CodingSchemeDesignator: \"DCM\",\n            CodeMeaning: \"Source image for image processing operation\"\n          }\n        },\n        DerivationCodeSequence: {\n          CodeValue: \"113076\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Segmentation\"\n        }\n      };\n      this.dataset.PerFrameFunctionalGroupsSequence[frameIndex].FrameContentSequence = {\n        DimensionIndexValues: [\n          1,\n          frameIndex+1\n        ]\n      };\n      this.dataset.PerFrameFunctionalGroupsSequence[frameIndex].SegmentIdentificationSequence = {\n        ReferencedSegmentNumber: 1\n      };\n    }\n\n    // these are copied with pixels, but don't belong in segmentation\n    for (let frameIndex = 0; frameIndex < this.dataset.NumberOfFrames; frameIndex++) {\n      // TODO: instead explicitly copy the position sequence\n      let group = this.dataset.PerFrameFunctionalGroupsSequence[frameIndex];\n      delete(group.FrameVOILUTSequence);\n    }\n\n    if (!this.options.includeSliceSpacing) {\n      // per dciodvfy this should not be included, but dcmqi/Slicer requires it\n      delete(this.dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence.SpacingBetweenSlices);\n    }\n\n    // make an array of zeros for the pixels assuming bit packing (one bit per short)\n    // TODO: handle different packing and non-multiple of 8/16 rows and columns\n    this.dataset.PixelData = new ArrayBuffer(this.referencedDataset.PixelData.byteLength/16);\n  }\n\n  addSegment(Segment) {\n    if (\n      !Segment.SegmentLabel ||\n      !Segment.SegmentedPropertyCategoryCodeSequence ||\n      !Segment.SegmentedPropertyTypeCodeSequence ||\n      !Segment.SegmentAlgorithmType\n    ) {\n      throw new Error(`Segment does not contain all the required fields.`);\n    }\n\n    // Capitalise the SegmentAlgorithmType if it happens to be given in\n    // Lower/mixed case.\n    Segment.SegmentAlgorithmType = Segment.SegmentAlgorithmType.toUpperCase();\n\n    // Check SegmentAlgorithmType and SegmentAlgorithmName if necessary.\n    switch (Segment.SegmentAlgorithmType) {\n      case 'AUTOMATIC':\n      case 'SEMIAUTOMATIC':\n        if (!Segment.SegmentAlgorithmName) {\n          throw new Error(\n            `If the SegmentAlgorithmType is SEMIAUTOMATIC or AUTOMATIC,\n            SegmentAlgorithmName must be provided`\n          );\n        }\n\n        break;\n      case 'MANUAL': break;\n      default:\n        throw new Error(\n          `SegmentAlgorithmType ${Segment.SegmentAlgorithmType} invalid.`\n        );\n    }\n\n    const SegmentSequence = this.dataset.SegmentSequence;\n    Segment.SegmentNumber = SegmentSequence.length + 1;\n\n    SegmentSequence.push(Segment);\n  }\n\n  removeSegment(segmentNumber) {\n    const SegmentSequence = this.dataset.SegmentSequence;\n\n    // Remove the Segment\n    SegmentSequence.splice(segmentNumber - 1, 1);\n\n    // Alter the numbering of the following Segments.\n    for (let i = segmentNumber - 1; i < SegmentSequence.length; i++) {\n      SegmentSequence[i].SegmentNumber = i + 1;\n    }\n\n  }\n}\n\nclass StructuredReport extends DerivedDataset {\n  constructor (datasets, options={}) {\n    super(datasets, options);\n  }\n\n  // this assumes a normalized multiframe input and will create\n  // a multiframe derived image\n  derive() {\n    super.derive();\n\n    this.assignToDataset({\n      \"SOPClassUID\": DicomMetaDictionary.sopClassUIDsByName.EnhancedSR,\n      \"Modality\": \"SR\",\n      \"ValueType\": \"CONTAINER\",\n    });\n\n    this.assignFromReference([\n    ]);\n  }\n}\n\nexport { DerivedDataset };\nexport { DerivedPixels };\nexport { DerivedImage };\nexport { Segmentation };\nexport { StructuredReport };\n"],"sourceRoot":""}